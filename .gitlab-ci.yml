workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

stages:
  - lint
  - test
  - tag
  - publish

variables:
  GIT_STRATEGY: clone
  IMAGE_NAME: ${NDIP_DOCKER_REPOSITORY}/${CI_PROJECT_PATH}

before_script:
  - curl https://code.ornl.gov/rse-deployment/rse-sharables/raw/master/rse-bash-modules.sh -O
  - source rse-bash-modules.sh
  - func_rse_docker_cleanup
  - docker login -u $NDIP_DOCKER_USER -p $NDIP_DOCKER_PASSWORD $NDIP_DOCKER_REPOSITORY
  - export VERSION=$(cat pyproject.toml | grep "version =" | head -n 1 | awk '{ print $3 }' | tr -d '"')
after_script:
  - curl https://code.ornl.gov/rse-deployment/rse-sharables/raw/master/rse-bash-modules.sh -O
  - source rse-bash-modules.sh
  - func_rse_docker_cleanup

lint-check:
  stage: lint
  script:
    - docker build -f dockerfiles/Dockerfile --target source -t image .
    - docker run -u `id -u`:`id -g` image poetry run ruff check
    - docker run -u `id -u`:`id -g` image poetry run ruff format --check
    - docker run -u `id -u`:`id -g` image poetry run mypy .
    - docker tag image ${IMAGE_NAME}:src-${CI_COMMIT_SHA}
    - docker push ${IMAGE_NAME}:src-${CI_COMMIT_SHA}
  tags:
    - rse-multi-builder

unit-tests:
  stage: test
  script:
    - mkdir reports
    - docker run -u `id -u`:`id -g` -v `pwd`/reports:/src/reports ${IMAGE_NAME}:src-${CI_COMMIT_SHA} poetry run coverage run
    - docker run -u `id -u`:`id -g` -v `pwd`/reports:/src/reports ${IMAGE_NAME}:src-${CI_COMMIT_SHA} poetry run coverage report
    - docker run -u `id -u`:`id -g` -v `pwd`/reports:/src/reports ${IMAGE_NAME}:src-${CI_COMMIT_SHA} poetry run coverage xml -o reports/coverage.xml
    - sed -i "s:<source>/src:<source>${CI_BUILDS_DIR}/${CI_PROJECT_PATH}:" reports/coverage.xml

  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      junit: reports/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: reports/coverage.xml
  tags:
    - rse-multi-builder

docs-test:
  stage: test
  script:
    - docker run -u `id -u`:`id -g` ${IMAGE_NAME}:src-${CI_COMMIT_SHA} bash build_docs.sh
  tags:
    - rse-multi-builder


tag-release:
  stage: tag
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - when: never
  script:
    - git config user.email "$GITLAB_USER_EMAIL"
    - git config user.name "$GITLAB_USER_NAME"
    - >
      if [ -z $(git ls-remote --tags origin "$VERSION") ]; then
        git remote add gitlab https://oauth2:${NDIP_GROUP_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
        git tag ${VERSION}
        git push gitlab --tags
      fi
  tags:
  - rse-multi-builder


build-image:
  stage: publish
  variables:
    OVERWRITE_IMAGE: "false"
  when: manual
  script:
    - IMAGE_TAG=${VERSION}
    - docker build -f dockerfiles/Dockerfile -t image --target run --build-arg SOURCE_IMAGE=${IMAGE_NAME}:src-${CI_COMMIT_SHA} .
    - docker tag image ${IMAGE_NAME}:bin-${CI_COMMIT_SHA}
    - docker push ${IMAGE_NAME}:bin-${CI_COMMIT_SHA}
    - docker tag image ${IMAGE_NAME}:latest
    - docker push ${IMAGE_NAME}:latest
    - >
      if ! docker pull ${IMAGE_NAME}:${IMAGE_TAG} || [ "$OVERWRITE_IMAGE" == "true" ]; then
        docker tag image ${IMAGE_NAME}:${IMAGE_TAG}
        docker push ${IMAGE_NAME}:${IMAGE_TAG}
      else
        echo tag ${IMAGE_TAG} already exists in ${NDIP_DOCKER_REPOSITORY}. Use OVERWRITE_IMAGE="true", delete image in the repository or change the tag
        exit 1
      fi
  tags:
    - rse-multi-builder

package-build:
  stage: publish
  script:
    - >
      docker run
      -u `id -u`:`id -g`
      ${IMAGE_NAME}:src-${CI_COMMIT_SHA}
      bash -c "
      poetry config repositories.gitlab_repo ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi &&
      poetry publish -u gitlab-ci-token -p ${CI_JOB_TOKEN} -r gitlab_repo
      "
  when: manual
  tags:
    - rse-multi-builder
